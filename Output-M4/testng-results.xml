<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="2" total="12" passed="10">
  <reporter-output>
    <line>
      <![CDATA[Method started: subtractingTwoNumbers]]>
    </line>
    <line>
      <![CDATA[a:10	 b:20	 diff:-10]]>
    </line>
    <line>
      <![CDATA[Method started: addingTwoPositiveNumbers]]>
    </line>
    <line>
      <![CDATA[a:10	 b:20	 sum:30]]>
    </line>
    <line>
      <![CDATA[Test Method Passed]]>
    </line>
    <line>
      <![CDATA[Test Method Passed]]>
    </line>
    <line>
      <![CDATA[Method started: divideZerobyANumber]]>
    </line>
    <line>
      <![CDATA[a:0	 b:1	 quotient:0]]>
    </line>
    <line>
      <![CDATA[Method started: isNegative]]>
    </line>
    <line>
      <![CDATA[a:1	 IsNegative:false]]>
    </line>
    <line>
      <![CDATA[Test Method Passed]]>
    </line>
    <line>
      <![CDATA[Test Method Passed]]>
    </line>
    <line>
      <![CDATA[Method started: divideByZero]]>
    </line>
    <line>
      <![CDATA[Test Method Passed]]>
    </line>
    <line>
      <![CDATA[Method started: isPositive]]>
    </line>
    <line>
      <![CDATA[a:-1	 IsPositive:false]]>
    </line>
    <line>
      <![CDATA[Test Method Passed]]>
    </line>
    <line>
      <![CDATA[Method started: cosine]]>
    </line>
    <line>
      <![CDATA[a:0	 cos:0.0]]>
    </line>
    <line>
      <![CDATA[Method started: squareRootOfNegativeNumber]]>
    </line>
    <line>
      <![CDATA[a:-25	 SquareRoot:5.0]]>
    </line>
    <line>
      <![CDATA[Test Method Failed]]>
    </line>
    <line>
      <![CDATA[Test Method Failed]]>
    </line>
    <line>
      <![CDATA[Method started: multiplyingNumbers]]>
    </line>
    <line>
      <![CDATA[a:10	 b:20	 product:200]]>
    </line>
    <line>
      <![CDATA[Test Method Passed]]>
    </line>
    <line>
      <![CDATA[Method started: multiplyingNumbers]]>
    </line>
    <line>
      <![CDATA[a:20	 b:10	 product:200]]>
    </line>
    <line>
      <![CDATA[Test Method Passed]]>
    </line>
    <line>
      <![CDATA[Method started: multiplyingNumbers]]>
    </line>
    <line>
      <![CDATA[a:0	 b:5	 product:0]]>
    </line>
    <line>
      <![CDATA[Test Method Passed]]>
    </line>
    <line>
      <![CDATA[Method started: multiplyingNumbers]]>
    </line>
    <line>
      <![CDATA[a:-5	 b:0	 product:0]]>
    </line>
    <line>
      <![CDATA[Test Method Passed]]>
    </line>
  </reporter-output>
  <suite name="CalculatorSuite" duration-ms="110" started-at="2018-01-26T06:52:09Z" finished-at="2018-01-26T06:52:09Z">
    <groups>
      <group name="Sanity">
        <method signature="NewTest.addingTwoPositiveNumbers()[pri:0, instance:com.M4.NewTest@2d6d8735]" name="addingTwoPositiveNumbers" class="com.M4.NewTest"/>
        <method signature="NewTest.subtractingTwoNumbers()[pri:0, instance:com.M4.NewTest@2d6d8735]" name="subtractingTwoNumbers" class="com.M4.NewTest"/>
      </group> <!-- Sanity -->
      <group name="Negative">
        <method signature="NewTest.cosine()[pri:0, instance:com.M4.NewTest@2d6d8735]" name="cosine" class="com.M4.NewTest"/>
        <method signature="NewTest.divideByZero()[pri:0, instance:com.M4.NewTest@2d6d8735]" name="divideByZero" class="com.M4.NewTest"/>
        <method signature="NewTest.divideZerobyANumber()[pri:0, instance:com.M4.NewTest@2d6d8735]" name="divideZerobyANumber" class="com.M4.NewTest"/>
        <method signature="NewTest.isNegative()[pri:0, instance:com.M4.NewTest@2d6d8735]" name="isNegative" class="com.M4.NewTest"/>
        <method signature="NewTest.isPositive()[pri:0, instance:com.M4.NewTest@2d6d8735]" name="isPositive" class="com.M4.NewTest"/>
        <method signature="NewTest.multiplyingNumbers(long, long, long)[pri:0, instance:com.M4.NewTest@2d6d8735]" name="multiplyingNumbers" class="com.M4.NewTest"/>
        <method signature="NewTest.squareRootOfNegativeNumber()[pri:0, instance:com.M4.NewTest@2d6d8735]" name="squareRootOfNegativeNumber" class="com.M4.NewTest"/>
      </group> <!-- Negative -->
    </groups>
    <test name="Test" duration-ms="110" started-at="2018-01-26T06:52:09Z" finished-at="2018-01-26T06:52:09Z">
      <class name="com.M4.NewTest">
        <test-method status="PASS" signature="subtractingTwoNumbers()[pri:0, instance:com.M4.NewTest@2d6d8735]" name="subtractingTwoNumbers" duration-ms="32" started-at="2018-01-26T12:22:09Z" finished-at="2018-01-26T12:22:09Z">
          <reporter-output>
            <line>
              <![CDATA[a:10	 b:20	 diff:-10]]>
            </line>
            <line>
              <![CDATA[Test Method Passed]]>
            </line>
          </reporter-output>
        </test-method> <!-- subtractingTwoNumbers -->
        <test-method status="PASS" signature="addingTwoPositiveNumbers()[pri:0, instance:com.M4.NewTest@2d6d8735]" name="addingTwoPositiveNumbers" duration-ms="32" started-at="2018-01-26T12:22:09Z" finished-at="2018-01-26T12:22:09Z">
          <reporter-output>
            <line>
              <![CDATA[a:10	 b:20	 sum:30]]>
            </line>
            <line>
              <![CDATA[Test Method Passed]]>
            </line>
          </reporter-output>
        </test-method> <!-- addingTwoPositiveNumbers -->
        <test-method status="PASS" signature="isNegative()[pri:0, instance:com.M4.NewTest@2d6d8735]" name="isNegative" duration-ms="0" depends-on-groups="Sanity" started-at="2018-01-26T12:22:09Z" finished-at="2018-01-26T12:22:09Z">
          <reporter-output>
            <line>
              <![CDATA[a:1	 IsNegative:false]]>
            </line>
            <line>
              <![CDATA[Test Method Passed]]>
            </line>
          </reporter-output>
        </test-method> <!-- isNegative -->
        <test-method status="PASS" signature="divideByZero()[pri:0, instance:com.M4.NewTest@2d6d8735]" name="divideByZero" duration-ms="0" depends-on-groups="Sanity" started-at="2018-01-26T12:22:09Z" finished-at="2018-01-26T12:22:09Z">
          <exception class="java.lang.NumberFormatException">
            <message>
              <![CDATA[Attempt to divide by zero]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NumberFormatException: Attempt to divide by zero
	at com.epam.tat.module4.Calculator.div(Calculator.java:34)
	at com.M4.NewTest.divideByZero(NewTest.java:96)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NumberFormatException -->
          <reporter-output>
            <line>
              <![CDATA[Test Method Passed]]>
            </line>
          </reporter-output>
        </test-method> <!-- divideByZero -->
        <test-method status="PASS" signature="isPositive()[pri:0, instance:com.M4.NewTest@2d6d8735]" name="isPositive" duration-ms="0" depends-on-groups="Sanity" started-at="2018-01-26T12:22:09Z" finished-at="2018-01-26T12:22:09Z">
          <reporter-output>
            <line>
              <![CDATA[a:-1	 IsPositive:false]]>
            </line>
            <line>
              <![CDATA[Test Method Passed]]>
            </line>
          </reporter-output>
        </test-method> <!-- isPositive -->
        <test-method status="FAIL" signature="squareRootOfNegativeNumber()[pri:0, instance:com.M4.NewTest@2d6d8735]" name="squareRootOfNegativeNumber" duration-ms="16" depends-on-groups="Sanity" started-at="2018-01-26T12:22:09Z" finished-at="2018-01-26T12:22:09Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [2.23606797749979] but found [5.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [2.23606797749979] but found [5.0]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertEqualsImpl(Assert.java:135)
	at org.testng.Assert.assertEquals(Assert.java:116)
	at org.testng.Assert.assertEquals(Assert.java:179)
	at com.M4.NewTest.squareRootOfNegativeNumber(NewTest.java:119)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[a:-25	 SquareRoot:5.0]]>
            </line>
            <line>
              <![CDATA[Test Method Failed]]>
            </line>
          </reporter-output>
        </test-method> <!-- squareRootOfNegativeNumber -->
        <test-method status="PASS" signature="divideZerobyANumber()[pri:0, instance:com.M4.NewTest@2d6d8735]" name="divideZerobyANumber" duration-ms="0" depends-on-groups="Sanity" started-at="2018-01-26T12:22:09Z" finished-at="2018-01-26T12:22:09Z">
          <reporter-output>
            <line>
              <![CDATA[a:0	 b:1	 quotient:0]]>
            </line>
            <line>
              <![CDATA[Test Method Passed]]>
            </line>
          </reporter-output>
        </test-method> <!-- divideZerobyANumber -->
        <test-method status="FAIL" signature="cosine()[pri:0, instance:com.M4.NewTest@2d6d8735]" name="cosine" duration-ms="16" depends-on-groups="Sanity" started-at="2018-01-26T12:22:09Z" finished-at="2018-01-26T12:22:09Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [1.0] but found [0.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [1.0] but found [0.0]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertEqualsImpl(Assert.java:135)
	at org.testng.Assert.assertEquals(Assert.java:116)
	at org.testng.Assert.assertEquals(Assert.java:179)
	at com.M4.NewTest.cosine(NewTest.java:128)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[a:0	 cos:0.0]]>
            </line>
            <line>
              <![CDATA[Test Method Failed]]>
            </line>
          </reporter-output>
        </test-method> <!-- cosine -->
        <test-method status="PASS" signature="multiplyingNumbers(long, long, long)[pri:0, instance:com.M4.NewTest@2d6d8735]" name="multiplyingNumbers" duration-ms="0" depends-on-groups="Sanity" started-at="2018-01-26T12:22:09Z" data-provider="DataProviderValues" finished-at="2018-01-26T12:22:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[200]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[a:10	 b:20	 product:200]]>
            </line>
            <line>
              <![CDATA[Test Method Passed]]>
            </line>
          </reporter-output>
        </test-method> <!-- multiplyingNumbers -->
        <test-method status="PASS" signature="multiplyingNumbers(long, long, long)[pri:0, instance:com.M4.NewTest@2d6d8735]" name="multiplyingNumbers" duration-ms="0" depends-on-groups="Sanity" started-at="2018-01-26T12:22:09Z" data-provider="DataProviderValues" finished-at="2018-01-26T12:22:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[-5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[a:-5	 b:0	 product:0]]>
            </line>
            <line>
              <![CDATA[Test Method Passed]]>
            </line>
          </reporter-output>
        </test-method> <!-- multiplyingNumbers -->
        <test-method status="PASS" signature="multiplyingNumbers(long, long, long)[pri:0, instance:com.M4.NewTest@2d6d8735]" name="multiplyingNumbers" duration-ms="0" depends-on-groups="Sanity" started-at="2018-01-26T12:22:09Z" data-provider="DataProviderValues" finished-at="2018-01-26T12:22:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[a:0	 b:5	 product:0]]>
            </line>
            <line>
              <![CDATA[Test Method Passed]]>
            </line>
          </reporter-output>
        </test-method> <!-- multiplyingNumbers -->
        <test-method status="PASS" signature="multiplyingNumbers(long, long, long)[pri:0, instance:com.M4.NewTest@2d6d8735]" name="multiplyingNumbers" duration-ms="0" depends-on-groups="Sanity" started-at="2018-01-26T12:22:09Z" data-provider="DataProviderValues" finished-at="2018-01-26T12:22:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[200]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[a:20	 b:10	 product:200]]>
            </line>
            <line>
              <![CDATA[Test Method Passed]]>
            </line>
          </reporter-output>
        </test-method> <!-- multiplyingNumbers -->
      </class> <!-- com.M4.NewTest -->
    </test> <!-- Test -->
  </suite> <!-- CalculatorSuite -->
</testng-results>
